4.1.1 程序运行为什么需要内存
4.1.1.1 计算机程序运行的目的
计算程序中很重要的部分就是数据
计算机程序 = 代码 + 数据
宏观上理解：代码就是动作，就是加工数据的动作，数据就是数字，就是动作加工的对象。
程序运行的目的不外乎2个：结果和过程。
程序运行有时以形参为对象，外加局部变量的协助，经过函数体运行，最终得到结果。
程序运行有时并不重视结果，也有的返回类型是VOID，只是比较注重运行的过程，比如通过运行程序获取文本内容并进行保存，再比如通过运行程序打印出一系列信息进行提示或警告。
也有的程序运行同时注重结果和过程，总之，程序运行的目的脱离不了结果和过程。

4.1.5 C语言如何操作内存
4.1.5.1 内存单元有两个要素：地址和空间，每个内存单元格对应一个地址，每个地址的空间是8bit.
4.1.5.2 有了地址，还要确定要用多大的空间来存取数据，就像是要用多大的内存单元格子来存取数据。每次存取数据时使用多少个字节的空间取决于给地址安排的类型，包括char(8 bit) short(一般是16 bit) int(一般是32 bit) float(一般是32bit) double long
int类型是多大取决于运行的平台，s5pv210在linux中的运行环境是32位的，int就是32 bit即4字节大小（也即内存单元格子的大小是4字节）。
4.1.5.3 内存单元格子是以字节为编址单位的
(int *) 0：首先编译器将0作为内存单元格子的地址，地址存放的是指针，指针指向的是int类型的数据。
(int *) a：编译器为变量a分配一个地址，这个地址存放的是指针，这个指针指向的是int类型的数据。
int a：编译器为变量a分配一个地址，这个地址存放的就是int类型的数据。
4.1.5.4 类型只是对后面数字或符号（代表的是内存地址）所表征的内存的长度规定和解析方法规定而已。

4.1.6 内存管理之结构体
4.6.1 数据结构的意义所在
数据结构就是一门研究数据如何组织（如何在内存中排布）、如何加工的学问。
4.6.2 最简单的数据结构：数组
为什么要有数组？因为程序中有多个类型相同、意义相关的变量需要管理，如果一一列出这些变量会比较乱，也不好统一管理，于是，就有了数组的概念，使用数组更容易管理。
4.6.3 数组的优势和缺陷
优势：数组比较简单，通过下标就能表示一个元素，可以随机访问。
缺陷1：数组要求每个元素的类型必须相同，不同类型的数据无法构成数组。而现实生活中，往往需要类型不同但又意义相关的数据来描述一个对象。数组无法满足这一需要。
缺陷2：数组大小必须在定义时就给出，而且一旦给出大小，就不能再次修改。
4.6.4 结构体
可以看成数组的升级版，结构体的变量允许具有不同的类型。
















